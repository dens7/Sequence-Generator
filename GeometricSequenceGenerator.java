
/** 
 * /////////////////////////////// ALL ASSIGNMENTS INCLUDE THIS SECTION///////////////////////////// 
 * // Title: Sequence Generator Program // Files: Sequence.java,
 * //        ArithmeticSequenceGenerator.java, GeometricSequenceGenerator, 
 * //        FibonacciSequenceGenerator.java, DigitalProductSequenceGenerator, SequenceGeneratorTest 
 * // Course: CS 300 Fall term 2018 
 * // Author: Vedaant Tambi 
 * // Email: tambi@wisc.edu 
 * // Lecturer's Name: MOUNA AYARI BEN HADJ KACEM 
 * //////////////////////////////////////// CREDIT OUTSIDE HELP ////////////////////////////////////
 * //                                              NONE                                           //
 * //////////////////////////////////////// 100 COLUMNS WIDE ///////////////////////////////////////
 **
 */

import java.util.Iterator;

/**
 * This class represents a generator for a geometric progression This class implements the
 * Iterator<Integer> interface
 * 
 * @author Vedaant Tambi, Mouna Ayari Ben Hadj Kacem
 * @version 1.0
 * @since 1.0
 */
public class GeometricSequenceGenerator implements Iterator<Integer> {
  // These variables are declared as final because they do not change for a particular sequence
  private final int SIZE; // The number of elements in this sequence
  private final int INIT; // The first term in this sequence
  private final int RATIO; // The common ratio for this sequence
  private int next; // The next term in the sequence
  private int generatedCount; // The number of terms generated so far in this sequence
  // It refers also to the order of the next number to be generated by next() method

  /**
   * The constructor makes sure that user parameters are mathematically correct (i.e logically
   * correct) and initializes them accordingly
   * 
   * @param init stores the initial number of the sequence, given by the user  
   * @param ratio stores the common ratio of the geometric progression, given by the user 
   * @param size stores the number of elements that have to be generated, given by the user 
   */
  public GeometricSequenceGenerator(int init, int ratio, int size) {
    // check for the precondition: size > 0, throws an IllegalArgumentException if this precondition
    // is not satisfied
    if (size <= 0)
      throw new IllegalArgumentException("WARNING: CANNOT create a sequence with size <= zero.");
    // check for the validity of init (>=0) and ratio (>0), throw an IllegalArgumentException
    // if these two parameters are not valid
    if (init <= 0 || ratio <= 0)
      throw new IllegalArgumentException("WARNING: The starting element and the common ratio for a "
          + "geometric progression should be STRICTLY POSITIVE.");

    // set the instance fields
    this.SIZE = size;
    this.INIT = init;
    this.RATIO = ratio;
    next = init; // initializes next to the first element in this arithmetic progression
    generatedCount = 0; // the number of elements that have been traversed is 0
  }


  /**
   * An iterator method that checks if there are elements to iterate over or not
   * 
   * @return true if the next element is left to traverse and false if the last element of the
   *         sequence has been reached
   */
  @Override
  public boolean hasNext() {
    // Time complexity: O(1), where the problem size N 
    // represents the size of the sequence to generate.
    return generatedCount < SIZE; // the count must be strictly less than the SIZE
  }

  /**
   * This method returns the current element in the sequence and moves the
   * GeometricSequenceGenerator iterator forward
   * 
   * @return the current Integer stored in the sequence
   */
  @Override
  public Integer next() {
    // Time complexity: O(1), where the problem size N 
    // represents the size of the sequence to generate.
    if (!hasNext()) // check if the current element has a next element in this sequence
      return null;  
    int current = next; // set the current element to next
    generatedCount++; // increment the number of generated elements so far
    next *= RATIO; // set the next element (adds the common ratio to the current number)
    return current; // return the current number as the generated one
  }
}
