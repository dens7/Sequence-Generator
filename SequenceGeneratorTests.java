/**
 * /////////////////////////////// ALL ASSIGNMENTS INCLUDE THIS SECTION/////////////////////////////
 * // Title: Sequence Generator Program // Files: Sequence.java, //
 * ArithmeticSequenceGenerator.java, GeometricSequenceGenerator, // FibonacciSequenceGenerator.java,
 * DigitalProductSequenceGenerator, SequenceGeneratorTest // Course: CS 300 Fall term 2018 //
 * Author: Vedaant Tambi // Email: tambi@wisc.edu // Lecturer's Name: MOUNA AYARI BEN HADJ KACEM
 * //////////////////////////////////////// CREDIT OUTSIDE HELP ////////////////////////////////////
 * // NONE // //////////////////////////////////////// 100 COLUMNS WIDE
 * ///////////////////////////////////////
 **
 */

import java.util.Iterator;

/**
 * This class is a tester class that contains methods to test specific methods of the Sequence
 * Generator program
 * 
 * @author Vedaant Tambi, Mouna Ayari Ben Hadj Kacem
 * @version 1.0
 * @since 1.0
 */
public class SequenceGeneratorTests {

  /**
   * This method tests whether the Geometric Sequence Generator generates the correct sequence, by
   * testing its constructor, hasNext and next methods
   * 
   * @return true when test verifies correct functionality, and false otherwise.
   */
  public static boolean GeometricSequenceGeneratorTest() {
    boolean exceptionCaught = false; // variable to check whether an exception was caught or not
    // try block to check if the generator is initialized with the correct variables
    try {
      GeometricSequenceGenerator G1 = new GeometricSequenceGenerator(7, 0, 5); // creates generator
    } // catch block for the exception for incorrect common ratio passed to the constructor
    catch (IllegalArgumentException bug) {
      exceptionCaught = true; // because the exception is caught, this evaluates to true
      // checks whether the right exception has been thrown by checking the message of the exception
      if (!bug.getMessage().equals("WARNING: The starting element and the common ratio for a "
          + "geometric progression should be STRICTLY POSITIVE."))
        return false; // method fails if the right exception is not thrown
    }

    // because the exception is supposed to caught, the generator fails if it is not caught
    if (!(exceptionCaught))
      return false;

    // try block to catch any sort of exception that can cause the iterator to fail
    try {
      // create generator with valid initial variables
      GeometricSequenceGenerator G2 = new GeometricSequenceGenerator(3, 4, 5);
      // ArrayList that stores the expected sequence to be generated by this generator
      Integer[] geoProgression = {3, 12, 48, 192, 768};
      // checks whether the whole sequence is yet to be generated
      if (!G2.hasNext()) // if this block is executed it means that the iterator has completed
        return false; // generating the sequence, which indicates incorrect functionality
      // loop to check whether each number of the sequence has been generated correctly
      for (int i = 0; i < 5; i++) // the size of the sequence is 5
        // the generator's values are checked against the hard-coded ArrayList's values
        if (!G2.next().equals(geoProgression[i]))
          return false; // false is returned to indicate that the iterator has bad functionality
      // checks whether the whole sequence is yet to be generated
      if (G2.hasNext()) // if this block is executed it means that the iterator has not completed
        return false; // generating the sequence, which indicates incorrect functionality

    } catch (Exception bug) { // catches any exception thrown by the generator, in case of failure
      return false; // any exception thrown implies incorrect functionality of the generator
    }
    return true; // if everything is correct, then the function returns true
  }

  /**
   * This method tests whether the Fibonacci Sequence Generator generates the correct sequence, by
   * testing its constructor, hasNext and next methods
   * 
   * @return true when test verifies correct functionality, and false otherwise.
   */
  public static boolean FibonacciSequenceGeneratorTest() {
    boolean exceptionCaught = false; // variable to check whether an exception was caught or not
    // try block to check if the generator is initialized with the correct variables
    try {
      FibonacciSequenceGenerator F1 = new FibonacciSequenceGenerator(-7); // creates generator
    } // catch block for the exception for negative passed to the constructor
    catch (IllegalArgumentException bug) {
      exceptionCaught = true; // because the exception is caught, this evaluates to true
      // checks whether the right exception has been thrown by checking the message of the exception
      if (!bug.getMessage().equals("WARNING: CANNOT create a sequence with size <= zero."))
        return false; // method fails if the right exception is not thrown
    }

    // because the exception is supposed to caught, the generator fails if it is not caught
    if (!(exceptionCaught))
      return false;

    // try block to catch any sort of exception that can cause the iterator to fail
    try {
      // create generator with valid initial variables
      FibonacciSequenceGenerator F2 = new FibonacciSequenceGenerator(9);
      // ArrayList that stores the expected sequence to be generated by this generator
      Integer[] FiboProgression = {0, 1, 1, 2, 3, 5, 8, 13, 21};
      // checks whether the whole sequence is yet to be generated
      if (!F2.hasNext()) // if this block is executed it means that the iterator has completed
        return false; // generating the sequence, which indicates incorrect functionality
      // loop to check whether each number of the sequence has been generated correctly
      for (int i = 0; i < 9; i++) // the size of the sequence is 9
        // the generator's values are checked against the hard-coded ArrayList's values
        if (!F2.next().equals(FiboProgression[i]))
          return false; // false is returned to indicate that the iterator has bad functionality
      // checks whether the whole sequence is yet to be generated
      if (F2.hasNext()) // if this block is executed it means that the iterator has not completed
        return false; // generating the sequence, which indicates incorrect functionality
    } catch (Exception bug) { // catches any exception thrown by the generator, in case of failure
      return false; // any exception thrown implies incorrect functionality of the generator
    }
    return true; // if everything is correct, then the function returns true
  }

  /**
   * This method tests whether the Digital Product Sequence Generator generates the correct
   * sequence, by testing its constructor, hasNext and next methods
   * 
   * @return true when test verifies correct functionality, and false otherwise.
   */
  public static boolean DigitProductSequenceGeneratorTest() {
    Iterator<Integer> sequenceIterator; // iterator to iterate and generate the sequence
    boolean exceptionCaught = false; // variable to check whether an exception was caught or not
    // try block to catch any sort of exception that can cause the iterator to fail
    try {
      DigitProductSequenceGenerator D1 = new DigitProductSequenceGenerator(0, 6);
      sequenceIterator = D1.getIterator(); // D1's iterator is initialized to sequenceIterator
    } // catch block for the exception for negative passed to the constructor
    catch (IllegalArgumentException bug) {
      exceptionCaught = true; // because the exception is caught, this evaluates to true
      // checks whether the right exception has been thrown by checking the message of the exception
      if (!bug.getMessage().equals("WARNING: The starting element for digit product sequence "
          + "cannot be less than or equal to zero."))
        return false; // method fails if the right exception is not thrown
    }
    // because the exception is supposed to caught, the generator fails if it is not caught
    if (!(exceptionCaught))
      return false;
    // try block to catch any sort of exception that can cause the iterator to fail
    try {
      // create generator with valid initial variables
      DigitProductSequenceGenerator D2 = new DigitProductSequenceGenerator(10, 5);
      sequenceIterator = D2.getIterator(); // D2's iterator is initialized to sequenceIterator
      // ArrayList that stores the expected sequence to be generated by this generator
      Integer[] DigiProgression = {10, 11, 12, 14, 18};
      // checks whether the whole sequence is yet to be generated
      if (!sequenceIterator.hasNext()) // if this block is executed it means that the iterator has
                                       // completed
        return false; // generating the sequence, which indicates incorrect functionality
      // loop to check whether each number of the sequence has been generated correctly
      for (int i = 0; i < 5; i++) // the size of the sequence is 5
        // the generator's values are checked against the hard-coded ArrayList's values
        if (!sequenceIterator.next().equals(DigiProgression[i]))
          return false; // false is returned to indicate that the iterator has bad functionality
      // checks whether the whole sequence is yet to be generated
      if (sequenceIterator.hasNext()) // if this block is executed it means that the iterator has
                                      // not completed
        return false; // generating the sequence, which indicates incorrect functionality
    } catch (Exception bug) { // catches any exception thrown by the generator, in case of failure
      return false; // any exception thrown implies incorrect functionality of the generator
    }
    return true; // if everything is correct, then the function returns true
  }

  /**
   * Calls the Sequence Generator methods and displays the results of the tests to the user
   * 
   * @param args
   */
  public static void main(String[] args) {

    // Calls and displays the results of the test methods
    System.out.println("\nThe GeometricSequenceGeneratorTest() method returns: "
        + GeometricSequenceGeneratorTest());
    System.out.println("\nThe FibonacciSequenceGeneratorTest() method returns: "
        + FibonacciSequenceGeneratorTest());
    System.out.println("\nThe DigitProductSequenceGeneratorTest() method returns: "
        + DigitProductSequenceGeneratorTest());
  }
}
